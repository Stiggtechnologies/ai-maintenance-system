@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="fixed bottom-4 right-4 z-50">
    <button @onclick="ToggleChat" class="bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700 transition-all duration-200 transform hover:scale-105">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.955 8.955 0 01-4.126-.98L3 20l1.98-5.874A8.955 8.955 0 013 12c0-4.418 3.582-8 8-8s8 3.582 8 8z"></path>
        </svg>
    </button>
    
    @if (IsOpen)
    {
        <div class="bg-white rounded-lg shadow-2xl w-80 mt-4 border border-gray-200">
            <!-- Header -->
            <div class="bg-blue-600 text-white p-4 rounded-t-lg flex justify-between items-center">
                <h3 class="font-semibold">ðŸ¤– AI Copilot Assistant</h3>
                <button @onclick="ToggleChat" class="text-white hover:text-gray-200">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <!-- Chat Messages -->
            <div class="h-64 overflow-y-auto p-4 space-y-3">
                @foreach (var message in ChatMessages)
                {
                    <div class="@(message.IsUser ? "text-right" : "text-left")">
                        <div class="@(message.IsUser ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-800") inline-block p-2 rounded-lg max-w-xs text-sm">
                            @message.Content
                        </div>
                        <div class="text-xs text-gray-500 mt-1">
                            @message.Timestamp.ToString("HH:mm")
                        </div>
                    </div>
                }
                
                @if (IsProcessing)
                {
                    <div class="text-left">
                        <div class="bg-gray-100 text-gray-800 inline-block p-2 rounded-lg text-sm">
                            <div class="flex items-center space-x-1">
                                <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                                <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Input Area -->
            <div class="p-4 border-t border-gray-200">
                <div class="flex space-x-2">
                    <input
                        type="text"
                        @bind="Query"
                        @onkeypress="@(async (e) => { if (e.Key == "Enter") await HandleQuery(); })"
                        placeholder="Ask about maintenance, assets, or compliance..."
                        class="flex-1 p-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                        disabled="@IsProcessing" />
                    <button
                        @onclick="HandleQuery"
                        disabled="@(IsProcessing || string.IsNullOrWhiteSpace(Query))"
                        class="bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                        </svg>
                    </button>
                </div>
                
                <!-- Quick Actions -->
                <div class="mt-2 flex flex-wrap gap-1">
                    <button @onclick="() => SetQuickQuery('Show asset health status')" class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded hover:bg-gray-200">
                        Asset Health
                    </button>
                    <button @onclick="() => SetQuickQuery('Generate maintenance schedule')" class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded hover:bg-gray-200">
                        Schedule
                    </button>
                    <button @onclick="() => SetQuickQuery('Check compliance status')" class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded hover:bg-gray-200">
                        Compliance
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int OrgId { get; set; }
    [Parameter] public string SubscriptionPlan { get; set; } = "";
    
    private string Query { get; set; } = "";
    private bool IsOpen { get; set; } = false;
    private bool IsProcessing { get; set; } = false;
    private List<ChatMessage> ChatMessages { get; set; } = new();

    protected override void OnInitialized()
    {
        // Add welcome message
        ChatMessages.Add(new ChatMessage
        {
            Content = "ðŸ‘‹ Hello! I'm your AI maintenance assistant. I can help with asset management, work orders, compliance, and more. What would you like to know?",
            IsUser = false,
            Timestamp = DateTime.Now
        });
    }

    private void ToggleChat() => IsOpen = !IsOpen;

    private void SetQuickQuery(string query)
    {
        Query = query;
        StateHasChanged();
    }

    private async Task HandleQuery()
    {
        if (string.IsNullOrWhiteSpace(Query) || IsProcessing)
            return;

        var userQuery = Query;
        Query = "";
        IsProcessing = true;

        // Add user message
        ChatMessages.Add(new ChatMessage
        {
            Content = userQuery,
            IsUser = true,
            Timestamp = DateTime.Now
        });

        StateHasChanged();

        try
        {
            var request = new { 
                query = userQuery, 
                org_id = OrgId, 
                subscription_plan = SubscriptionPlan,
                context = GetContextualInfo()
            };
            
            var response = await Http.PostAsJsonAsync("api/ai-agent", request);
            
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"AI request failed: {response.StatusCode}");
            }
            
            var data = await response.Content.ReadFromJsonAsync<AIResponse>();
            var aiResponse = data?.Response ?? "I'm sorry, I couldn't process that request right now.";
            
            // Add AI response
            ChatMessages.Add(new ChatMessage
            {
                Content = aiResponse,
                IsUser = false,
                Timestamp = DateTime.Now
            });
            
            // Log interaction for analytics
            await JSRuntime.InvokeVoidAsync("console.log", $"AI Copilot: Query processed for org {OrgId}");
        }
        catch (Exception ex)
        {
            ChatMessages.Add(new ChatMessage
            {
                Content = $"I encountered an error: {ex.Message}. Please try again or contact support if the issue persists.",
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
            
            // Scroll to bottom
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-container");
        }
    }

    private string GetContextualInfo()
    {
        return JsonSerializer.Serialize(new
        {
            org_id = OrgId,
            subscription_plan = SubscriptionPlan,
            timestamp = DateTime.UtcNow,
            user_context = "maintenance_dashboard"
        });
    }

    public class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class AIResponse
    {
        public string Response { get; set; } = "";
    }
}