@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<div class="p-6">
    <h2 class="text-2xl font-bold mb-4">StiggSync AI Dashboard</h2>
    
    <!-- Power BI Embedded Report -->
    <div class="mb-6">
        <h3 class="text-lg font-semibold mb-2">Real-time Analytics Dashboard</h3>
        <iframe width="100%" height="600" src="@PowerBIReportUrl" frameborder="0" allowfullscreen="true"></iframe>
    </div>
    
    <!-- Agent Selection and Execution -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div>
            <label class="block mb-2 font-medium">Select M&R Agent (15 Available)</label>
            <select @bind="SelectedAgent" class="w-full p-3 border rounded-lg">
                <option value="MaintenanceStrategyDevelopmentAgent">1. Maintenance Strategy Development</option>
                <option value="AssetManagementAgent">2. Asset Management</option>
                <option value="ReliabilityEngineeringAgent">3. Reliability Engineering</option>
                <option value="PlanningSchedulingAgent">4. Planning & Scheduling</option>
                <option value="WorkOrderManagementAgent">5. Work Order Management</option>
                <option value="ConditionMonitoringAgent">6. Condition Monitoring</option>
                <option value="InventoryManagementAgent">7. Inventory Management</option>
                <option value="MaintenanceOperationsAgent">8. Maintenance Operations</option>
                <option value="QualityAssuranceAgent">9. Quality Assurance</option>
                <option value="ComplianceAuditingAgent">10. Compliance & Auditing</option>
                <option value="SustainabilityESGAgent">11. Sustainability & ESG</option>
                <option value="DataAnalyticsAgent">12. Data Analytics</option>
                <option value="ContinuousImprovementAgent">13. Continuous Improvement</option>
                <option value="TrainingWorkforceAgent">14. Training & Workforce</option>
                <option value="FinancialContractAgent">15. Financial & Contract</option>
            </select>
        </div>
        
        <div>
            <label class="block mb-2 font-medium">Select Industry</label>
            <select @bind="SelectedIndustry" class="w-full p-3 border rounded-lg">
                <option value="Oil & Gas">Oil & Gas (SAP PM, OSIsoft PI)</option>
                <option value="Mining">Mining (Maximo, UpKeep)</option>
                <option value="Power & Utilities">Power & Utilities (Predix, OSIsoft PI)</option>
                <option value="Chemical/Manufacturing">Chemical/Manufacturing (SAP PM, Emerson AMS)</option>
                <option value="Aerospace & Transportation">Aerospace & Transportation (Honeywell APM, Maximo)</option>
            </select>
        </div>
    </div>
    
    <!-- Action Buttons -->
    <div class="flex gap-4 mb-6">
        <button @onclick="RunAgent" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
            Execute AI Agent
        </button>
        <button @onclick="ViewMetrics" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors">
            View ESG Metrics
        </button>
        <button @onclick="GenerateReport" class="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors">
            Generate Compliance Report
        </button>
    </div>
    
    <!-- Agent Response Display -->
    @if (!string.IsNullOrEmpty(AgentResponse))
    {
        <div class="bg-gray-50 p-6 rounded-lg mb-6">
            <h4 class="font-semibold mb-2">Agent Response:</h4>
            <p class="mb-4">@AgentResponse</p>
            <div class="flex gap-2">
                <button @onclick="ApproveAgentAction" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors">
                    Approve Action
                </button>
                <button @onclick="RejectAgentAction" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors">
                    Reject Action
                </button>
            </div>
        </div>
    }
    
    <!-- Key Metrics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-white p-4 rounded-lg shadow border">
            <h5 class="font-semibold text-gray-600">Total Assets</h5>
            <p class="text-2xl font-bold text-blue-600">@TotalAssets</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow border">
            <h5 class="font-semibold text-gray-600">Open Work Orders</h5>
            <p class="text-2xl font-bold text-orange-600">@OpenWorkOrders</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow border">
            <h5 class="font-semibold text-gray-600">ESG Score</h5>
            <p class="text-2xl font-bold text-green-600">@ESGScore%</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow border">
            <h5 class="font-semibold text-gray-600">Cost Savings</h5>
            <p class="text-2xl font-bold text-purple-600">$@CostSavings</p>
        </div>
    </div>
    
    <!-- AI Copilot Assistant -->
    <AIAgent OrgId="@OrgId" SubscriptionPlan="@SubscriptionPlan" />
</div>

@code {
    private string PowerBIReportUrl { get; set; } = "https://app.powerbi.com/reportEmbed?reportId=your-report-id";
    private int OrgId { get; set; } = 1;
    private string SubscriptionPlan { get; set; } = "freemium";
    private string SelectedAgent { get; set; } = "MaintenanceStrategyDevelopmentAgent";
    private string SelectedIndustry { get; set; } = "Oil & Gas";
    private string AgentResponse { get; set; } = "";
    
    // Dashboard metrics
    private int TotalAssets { get; set; } = 0;
    private int OpenWorkOrders { get; set; } = 0;
    private decimal ESGScore { get; set; } = 0;
    private string CostSavings { get; set; } = "0";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            try
            {
                // Load organization data
                var org = await Http.GetFromJsonAsync<Organization>("api/organizations/current");
                if (org != null)
                {
                    OrgId = org.OrgId;
                    SubscriptionPlan = org.SubscriptionPlan;
                }
                
                // Load dashboard metrics
                await LoadDashboardMetrics();
                
                // Configure Power BI URL with access token
                PowerBIReportUrl += $"&accessToken=your-embed-token&orgId={OrgId}";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading dashboard: {ex.Message}");
            }
        }
    }

    private async Task LoadDashboardMetrics()
    {
        try
        {
            // Simulate loading metrics - in production, these would come from your API
            TotalAssets = 10;
            OpenWorkOrders = 3;
            ESGScore = 87.3m;
            CostSavings = "125K";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading metrics: {ex.Message}");
        }
    }

    private async Task RunAgent()
    {
        try
        {
            var request = new { Agent = SelectedAgent, OrgId, Industry = SelectedIndustry };
            var response = await Http.PostAsJsonAsync("api/agent-orchestrator", request);
            
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Agent execution failed: {response.StatusCode}");
            }
            
            var data = await response.Content.ReadFromJsonAsync<AgentResult>();
            AgentResponse = data?.Result ?? "No response received";
            
            // Log to console for Teams integration simulation
            await JSRuntime.InvokeVoidAsync("console.log", $"Agent {SelectedAgent} executed for {SelectedIndustry}");
        }
        catch (Exception ex)
        {
            AgentResponse = $"Error: {ex.Message}";
        }
    }

    private async Task ViewMetrics()
    {
        try
        {
            // Simulate ESG metrics retrieval
            AgentResponse = $"ESG Metrics for {SelectedIndustry}: Environmental Score: 85%, Social Score: 92%, Governance Score: 88%. Total ESG Score: {ESGScore}%";
        }
        catch (Exception ex)
        {
            AgentResponse = $"Error loading ESG metrics: {ex.Message}";
        }
    }

    private async Task GenerateReport()
    {
        try
        {
            var request = new { Agent = "ComplianceAuditingAgent", OrgId, Industry = SelectedIndustry };
            var response = await Http.PostAsJsonAsync("api/agent-orchestrator", request);
            
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<AgentResult>();
                AgentResponse = $"Compliance Report Generated: {data?.Result}";
            }
            else
            {
                AgentResponse = "Error generating compliance report";
            }
        }
        catch (Exception ex)
        {
            AgentResponse = $"Error: {ex.Message}";
        }
    }

    private async Task ApproveAgentAction()
    {
        await JSRuntime.InvokeVoidAsync("console.log", $"Teams: {SelectedAgent} action approved for {SelectedIndustry}.");
        AgentResponse += " ✅ Action approved and executed.";
        StateHasChanged();
    }

    private async Task RejectAgentAction()
    {
        await JSRuntime.InvokeVoidAsync("console.log", $"Teams: {SelectedAgent} action rejected for {SelectedIndustry}.");
        AgentResponse += " ❌ Action rejected by user.";
        StateHasChanged();
    }

    public class Organization
    {
        public int OrgId { get; set; }
        public string SubscriptionPlan { get; set; } = "";
    }

    public class AgentResult
    {
        public string Result { get; set; } = "";
    }
}