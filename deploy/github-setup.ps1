# GitHub Repository Setup Script
# This script will create and push the code to GitHub

param(
    [Parameter(Mandatory=$true)]
    [string]$GitHubToken,
    
    [Parameter(Mandatory=$false)]
    [string]$RepositoryName = "ai-maintenance-system",
    
    [Parameter(Mandatory=$false)]
    [string]$GitHubUsername = "Stiggtechnologies"
)

Write-Host "ðŸš€ Setting up GitHub repository..." -ForegroundColor Green

# Initialize git repository if not already initialized
if (-not (Test-Path ".git")) {
    Write-Host "1. Initializing Git repository..." -ForegroundColor Yellow
    git init
    git branch -M main
}

# Configure git user (if not already configured)
$gitUser = git config --global user.name
if (-not $gitUser) {
    Write-Host "2. Configuring Git user..." -ForegroundColor Yellow
    git config --global user.email "orville.davis@stiggtechnologies.com"
    git config --global user.name "Orville Davis"
}

# Create .gitignore if it doesn't exist
if (-not (Test-Path ".gitignore")) {
    Write-Host "3. Creating .gitignore..." -ForegroundColor Yellow
    @"
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# Local settings
local.settings.json
*.local.json

# Azure Functions
.azure/
.vscode/

# Secrets
*.pfx
*.p12
appsettings.*.json
!appsettings.json

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Docker
.dockerignore

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
"@ | Out-File -FilePath ".gitignore" -Encoding UTF8
}

# Add all files
Write-Host "4. Adding files to Git..." -ForegroundColor Yellow
git add .

# Commit changes
Write-Host "5. Committing changes..." -ForegroundColor Yellow
git commit -m "Initial commit: StiggSyncAI - Complete AI-Powered Maintenance & Reliability System

Features:
- 15 specialized M&R AI agents
- Multi-industry support (Oil & Gas, Mining, Power & Utilities, Chemical, Aerospace)
- Enterprise integrations (SAP PM, Maximo, Predix, OSIsoft PI, Honeywell APM)
- Azure Functions with comprehensive monitoring
- Kubernetes deployment with auto-scaling
- Mobile app with offline capability
- ESG metrics tracking and compliance
- Blockchain audit trail
- Stripe subscription management
- Complete CI/CD pipeline

Ready for production deployment to Azure."

# Create GitHub repository using GitHub CLI or API
Write-Host "6. Creating GitHub repository..." -ForegroundColor Yellow
try {
    # Try using GitHub CLI first
    gh repo create "$GitHubUsername/$RepositoryName" --public --description "Complete AI-Powered Maintenance & Reliability System with 15 specialized agents for industrial maintenance operations" --confirm
    Write-Host "   Repository created using GitHub CLI" -ForegroundColor Green
} catch {
    # Fallback to API call
    Write-Host "   GitHub CLI not available, using API..." -ForegroundColor Yellow
    
    $headers = @{
        "Authorization" = "token $GitHubToken"
        "Accept" = "application/vnd.github.v3+json"
        "User-Agent" = "StiggSyncAI-Deployment-Script"
    }
    
    $body = @{
        "name" = $RepositoryName
        "description" = "Complete AI-Powered Maintenance & Reliability System with 15 specialized agents for industrial maintenance operations"
        "private" = $false
        "has_issues" = $true
        "has_projects" = $true
        "has_wiki" = $true
        "auto_init" = $false
    } | ConvertTo-Json
    
    try {
        $response = Invoke-RestMethod -Uri "https://api.github.com/user/repos" -Method POST -Headers $headers -Body $body -ContentType "application/json"
        Write-Host "   Repository created using GitHub API" -ForegroundColor Green
    } catch {
        Write-Host "   Repository might already exist or there was an error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Add remote origin
Write-Host "7. Adding remote origin..." -ForegroundColor Yellow
$remoteUrl = "https://github.com/$GitHubUsername/$RepositoryName.git"
try {
    git remote add origin $remoteUrl
} catch {
    # Remote might already exist
    git remote set-url origin $remoteUrl
}

# Push to GitHub
Write-Host "8. Pushing to GitHub..." -ForegroundColor Yellow
git push -u origin main

Write-Host "ðŸŽ‰ GitHub repository setup completed!" -ForegroundColor Green
Write-Host "ðŸ“‚ Repository URL: https://github.com/$GitHubUsername/$RepositoryName" -ForegroundColor Cyan
Write-Host "ðŸ”— Clone URL: $remoteUrl" -ForegroundColor Cyan

Write-Host "`nðŸ“‹ Next Steps:" -ForegroundColor Yellow
Write-Host "1. Visit the repository: https://github.com/$GitHubUsername/$RepositoryName"
Write-Host "2. Set up branch protection rules"
Write-Host "3. Configure GitHub Actions (if needed)"
Write-Host "4. Add collaborators and set permissions"
Write-Host "5. Create issues and project boards"
Write-Host "6. Set up GitHub Pages for documentation (optional)"

Write-Host "`nðŸš€ Ready to deploy to Azure!" -ForegroundColor Green
Write-Host "Run: .\deploy\azure-setup.ps1 -SubscriptionId 'your-subscription-id' -SqlAdminPassword 'YourSecurePassword123!'"